apiVersion: apps/v1
kind: Deployment
metadata:
  name: cwlabdeployment-odic
  namespace: cwlab-elixir-develop
  labels:
    app: cwlab-oidc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cwlab-oidc
  template:
    metadata:
      labels:
        app: cwlab-oidc
    spec:
      imagePullSecrets:
        - name: pipeline-docker-registry
      containers:
      - name: cwlab-oidc
        image: ${CICD_REGISTRY}/krini/cwlab:oidc-${CICD_EXECUTION_SEQUENCE}
        env:
        - name: BUILD_NUMBER
          value: oidc-${CICD_EXECUTION_SEQUENCE}
        - name: mysql-password-2 
          valueFrom:
            secretKeyRef:
              name: cwlab-mysql-2
              key: mysql-password
        - name: mysql-username-2 
          valueFrom:
            secretKeyRef:
              name: cwlab-mysql-2
              key: mysql-username
        ports:
        - containerPort: 5000
          
---
apiVersion: v1
kind: Service
metadata:
  name: cwlabservice-oidc
  namespace: cwlab-elixir-develop
spec:
  selector:
    app: cwlab-oidc
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cwlabingress-oidc
  namespace: cwlab-elixir-develop
  annotations:
    cert-manager.io/issuer: letsencrypt-prod
spec:
  rules:
  - host: cwlab-oidc.krini.ingress.rancher.computational.bio
    http:
      paths:
      - backend:
          serviceName: cwlabservice-oidc
          servicePort: 80
        path: /
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - cwlab-oidc.krini.ingress.rancher.computational.bio
    secretName: cwlab-oidc-letsencrypt-prod-private-cert # < cert-manager will store the created certificate in this secret.