# WEB_SERVER_HOST: localhost # If it shall only be available on the local machine, use "localhost".
                        # If it shall be remotely accessible from other machines on the same network, use "0.0.0.0".

WEB_SERVER_HOST: 0.0.0.0

## (2) choose the port:
WEB_SERVER_PORT: 5000 # The default is 5000, if this port is blocked choose a different one

TEMP_DIR: '/mnt/c/Users/kerst/OneDrive/home_dell/CWLab/scratch/temp'
WORKFLOW_DIR: '/mnt/c/Users/kerst/OneDrive/home_dell/CWLab/scratch/wf_dir'
EXEC_DIR: '/mnt/c/Users/kerst/OneDrive/home_dell/CWLab/scratch/exec'
INPUT_DIR: '/mnt/c/Users/kerst/OneDrive/home_dell/CWLab/scratch/input'
DB_DIR: '/mnt/c/Users/kerst/OneDrive/home_dell/CWLab/scratch/database'

DEBUG: True

ENABLE_USERS: True
USE_OIDC: True
OIDC_CONF: {
  response_type: 'id_token token',
  scope: 'openid profile',
  authority: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab',
  client_id: 'cwlab1',
  redirect_uri: 'http://localhost:5000/loginoidc',
  post_logout_redirect_uri: 'http://localhost:5000',
  metadata: {
      issuer: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab',
      authorization_endpoint: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab/protocol/openid-connect/auth',
      userinfo_endpoint: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab/protocol/openid-connect/userinfo',
      end_session_endpoint: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab/protocol/openid-connect/logout',
      jwks_uri: 'https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/cwlab/protocol/openid-connect/certs',
  },
  signingKeys: { "keys": [{ "kid": "vV7ZUJcgLS8a0p9rFXCqSsJ3DopI2LwOs2HUZvXjhS4", "kty": "RSA", "alg": "RS256", "use": "sig", "n": "iwpSicGDOCarEDTWOBEVsbAbZE_VWomYGNnWAncnjMnjZU33R9bnQji2ChhiLTGw0NgdUGhZLmp3hzew-mfKJLQ6l7D0_XM5vOiSLtl4Rdxv4XcPDx-ed4Kj3SBvDPmJwkdTairbQ3qEn1QVJynlGa51XPrtA9DIGsTZaXQP47_ChjdmHEldC6OcIWluDw5fqkZSiI_VR9bJFtsoS-UP6-Kt9OgyQVfqbdjJspAb_4Vpc17EJ4u6vIDsvmACOgixqFXU4DTYTnZRr0_nVbO7rSsk3Dn47sZlB8V35U2jaqv5R9_67g61VytoWxYHUeeNEKo1pnP3VzWULe2Y7TQ9ew", "e": "AQAB", "x5c": ["MIICmTCCAYECBgFveyimJjANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVjd2xhYjAeFw0yMDAxMDYxMzU5MTlaFw0zMDAxMDYxNDAwNTlaMBAxDjAMBgNVBAMMBWN3bGFiMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiwpSicGDOCarEDTWOBEVsbAbZE/VWomYGNnWAncnjMnjZU33R9bnQji2ChhiLTGw0NgdUGhZLmp3hzew+mfKJLQ6l7D0/XM5vOiSLtl4Rdxv4XcPDx+ed4Kj3SBvDPmJwkdTairbQ3qEn1QVJynlGa51XPrtA9DIGsTZaXQP47/ChjdmHEldC6OcIWluDw5fqkZSiI/VR9bJFtsoS+UP6+Kt9OgyQVfqbdjJspAb/4Vpc17EJ4u6vIDsvmACOgixqFXU4DTYTnZRr0/nVbO7rSsk3Dn47sZlB8V35U2jaqv5R9/67g61VytoWxYHUeeNEKo1pnP3VzWULe2Y7TQ9ewIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAsBdl7LHedl3HsHWaSUQwteZfwDx0IHFJ+qzooBzLV90GcEyXuJOmtQQ4hlagJw8EHkoxQcE353zkzI46iN+4iNTSccDSGwjGK6XC6M+uz13vvFhL5UJJA5iSWODdISFbkQA8cxBStOX5kTL8ljOpK0dIgXbty4AUonJgLTe72rxJY+gaFd6aCvNnG69Js56lP0RAdcIZNpBpMuZOl36kiN4fU9IaSTAgsXgMvTaPBVhkRgn3VMxxEmWz00gP9RKE7RYTjFnpZ688WAoZgYZCnKegITBb6mdJ6ueWS8+S4tf76jcV/zIrjN9HXVtLAMJgIk5GMe6if9Nz8cnRa7dJt"], "x5t": "7N-pF1QQGSr31uz8LS1fWKFzDww", "x5t#S256": "7q9ukcB9aMa1Y4zIPTrhMDahKgSZ1CPYfroZ8qt15Eg" }] }
}

EXEC_PROFILES:
  cwltool_local_test: # name of the exec profile
    
    # Choose the shell to use:
    #   bash (Linux/MacOs), cmd (Windows)
    shell: bash

    # how many times execution should be retried (default 3):
    max_retries: 3
    
    # timeout for each step in seconds 
    # if not specified the defaults are used:
    #   120 (pre_exec, eval, post_eval) and 86400 = 14h (exec),
    # to disable timeout set Null
    timeout:
      pre_exec: 120
      exec: 86400
      eval: 120
      post_exec: 120

    # available variables are:
    #   - JOB_ID
    #   - RUN_ID (please note: is only unique within a job)
    #   - CWL
    #   - RUN_INPUT
    #   - OUTPUT_DIR
    #   - LOG_FILE
    pre_exec: |
      touch "${OUTPUT_DIR}/pre_exec"
    exec: |
      cwltool --outdir "${OUTPUT_DIR}" "${WORKFLOW}" "${RUN_INPUT}" >> "${LOG_FILE}" 2>&1
    eval: | 
      LAST_LINE=$(tail -n 1 ${LOG_FILE})
      if [[ "${LAST_LINE}" == *"Final process status is success"* ]]
      then
        SUCCESS=True
      else
        SUCCESS=False
        ERR_MESSAGE="cwltool failed - ${LAST_LINE}"
      fi
    # Please note:
    # A SUCCESS vaiable has to be filled with true/false
    # If SUCCESS==false: the ERR_MESSAGE can provide further information 
    # such as error messages
    post_exec: |
      touch "${OUTPUT_DIR}/post_exec"

  cwltool_local_no_docker_test: # name of the exec profile
    
    # Choose the shell to use:
    #   bash (Linux/MacOs), cmd (Windows)
    shell: bash

    # how many times execution should be retried (default 3):
    max_retries: 3
    
    # timeout for each step in seconds 
    # if not specified the defaults are used:
    #   120 (pre_exec, eval, post_eval) and 86400 = 14h (exec),
    # to disable timeout set Null
    timeout:
      pre_exec: 120
      exec: 86400
      eval: 120
      post_exec: 120

    # available variables are:
    #   - JOB_ID
    #   - RUN_ID (please note: is only unique within a job)
    #   - CWL
    #   - RUN_INPUT
    #   - OUTPUT_DIR
    #   - LOG_FILE
    pre_exec: |
      touch "${OUTPUT_DIR}/pre_exec"
    exec: |
      cwltool --debug --no-container --outdir "${OUTPUT_DIR}" "${WORKFLOW}" "${RUN_INPUT}" >> "${LOG_FILE}" 2>&1
    eval: | 
      LAST_LINE=$(tail -n 1 ${LOG_FILE})
      if [[ "${LAST_LINE}" == *"Final process status is success"* ]]
      then
        SUCCESS=True
      else
        SUCCESS=False
        ERR_MESSAGE="cwltool failed - ${LAST_LINE}"
      fi
    # Please note:
    # A SUCCESS vaiable has to be filled with true/false
    # If SUCCESS==false: the ERR_MESSAGE can provide further information 
    # such as error messages
    post_exec: |
      touch "${OUTPUT_DIR}/post_exec"

  cwltool_local_singularity_test: # name of the exec profile
    
    # Choose the shell to use:
    #   bash (Linux/MacOs), cmd (Windows)
    shell: bash

    # how many times execution should be retried (default 3):
    max_retries: 3
    
    # timeout for each step in seconds 
    # if not specified the defaults are used:
    #   120 (pre_exec, eval, post_eval) and 86400 = 14h (exec),
    # to disable timeout set Null
    timeout:
      pre_exec: 120
      exec: 86400
      eval: 120
      post_exec: 120

    # available variables are:
    #   - JOB_ID
    #   - RUN_ID (please note: is only unique within a job)
    #   - CWL
    #   - RUN_INPUT
    #   - OUTPUT_DIR
    #   - LOG_FILE
    pre_exec: |
      touch "${OUTPUT_DIR}/pre_exec"
    exec: |
      cwltool --singularity --outdir "${OUTPUT_DIR}" "${WORKFLOW}" "${RUN_INPUT}" >> "${LOG_FILE}" 2>&1
    eval: | 
      LAST_LINE=$(tail -n 1 ${LOG_FILE})
      if [[ "${LAST_LINE}" == *"Final process status is success"* ]]
      then
        SUCCESS=True
      else
        SUCCESS=False
        ERR_MESSAGE="cwltool failed - ${LAST_LINE}"
      fi
    # Please note:
    # A SUCCESS vaiable has to be filled with true/false
    # If SUCCESS==false: the ERR_MESSAGE can provide further information 
    # such as error messages
    post_exec: |
      touch "${OUTPUT_DIR}/post_exec"


  test:
    shell: bash
    timeout:
      pre_exec: 120
      exec: 86400
      eval: 120
      post_exec: 120
    pre_exec: |
      touch "${OUTPUT_DIR}/pre_exec_test"
    exec: |
      touch "${OUTPUT_DIR}/exec_test"
    eval: | 
      touch "${OUTPUT_DIR}/eval"
    post_exec: |
      touch "${OUTPUT_DIR}/post_execs"
  cwltool_local: # name of the exec profile
    # Choose the shell to use:
    #   bash (Linux/MacOs), cmd (Windows)
    shell: bash
    
    # timeout for each step in seconds 
    # if not specified the defaults are used:
    #   120 (pre_exec, eval, post_eval) and 86400 = 14h (exec),
    # to disable timeout set Null
    timeout:
      pre_exec: 120
      exec: 86400
      eval: 120
      post_exec: 120

    # available variables are:
    #   - JOB_ID
    #   - RUN_ID (please note: is only unique within a job)
    #   - CWL
    #   - RUN_INPUT
    #   - OUTPUT_DIR
    #   - LOG_FILE
    exec: |
      cwltool --outdir "${OUTPUT_DIR}" "${WORKFLOW}" "${RUN_INPUT}" >> "${LOG_FILE}" 2>&1
    eval: | 
      LAST_LINE=$(tail -n 1 ${LOG_FILE})
      if [[ "${LAST_LINE}" == *"Final process status is success"* ]]
      then
        SUCCESS=True
      else
        SUCCESS=False
        ERR_MESSAGE="cwltool failed - ${LAST_LINE}"
      fi
    # Please note:
    # A SUCCESS vaiable has to be filled with true/false
    # If SUCCESS==false: the ERR_MESSAGE can provide further information 
    # such as error messages